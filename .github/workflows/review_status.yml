name: "Synchronize PR status with development board"

on:
  pull_request_review:
    types: [submitted, edited, dismissed]
  workflow_dispatch:
    inputs:
      reviewer:
        description: 'simulated reviewer'
        required: true
        type: string
      review_action:
        description: 'action to take'
        required: true
        type: choice
        options:
        - approve
        - request_change
        - dismiss
      pr_number:
        description: 'pr to act on'
        required: true
        type: string

permissions: write-all

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  sync_review_state:
    runs-on: ubuntu-latest
    steps:
    - name: "gather review submission data"
      run: |
        echo "${{ github.event_name }}"
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]
        then
          echo "REVIEWER=${{ github.event.inputs.reviewer }}" >> $GITHUB_ENV
          echo "ACTION=${{ github.event.inputs.review_action }}" >> $GITHUB_ENV
          echo "PR_NUM=${{ github.event.inputs.pr_number }}" >> $GITHUB_ENV
        elif [ "${{ github.event_name }}" == "pull_request_review" ]
        then
          echo "REVIEWER=${{ github.event.review.user.login }}" >> $GITHUB_ENV
          if [ "${{ github.event.review.state }}" == "approved" ]
          then
            echo "ACTION=approve" >> $GITHUB_ENV
          elif [ "${{ github.event.review.state }}" == "changes_requested" ]
          then
            echo "ACTION=request_change" >> $GITHUB_ENV
          else
            echo "ACTION=dismiss" >> $GITHUB_ENV
          fi
          echo "PR_NUM=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
        fi
    - name: "Identify associated issues"
      run: |
        gh api graphql -f query="query { repository(owner:\"nhorman\", name:\"testrepo\") { pullRequest(number: ${PR_NUM}) { closingIssuesReferences(first: 10) { edges { node { number } } } } } }" > ./issues.json
    - name: "Identify issues in project board"
      run: |
        for i in $(jq '.data.repository.pullRequest.closingIssuesReferences.edges[].node.number' ./issues.json)
        do
          echo " ISSUE $i "
          gh api graphql -F issue=$i -f query='query( $issue: Int!) { repository(owner:"nhorman", name:"testrepo") { issue(number: 1) { projectItems(first: 50) { edges { node { project { title} fieldValueByName(name: "Committer Reviewer") { ... on ProjectV2ItemFieldSingleSelectValue { status: name color } } } } } } } }'
        done

